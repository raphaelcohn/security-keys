#!/usr/bin/env sh
# This file is part of security-keys. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/security-keys/master/COPYRIGHT. No part of security-keys, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2021 The developers of security-keys. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/security-keys/master/COPYRIGHT.


set -e
set -u
set -f

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
								
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

cd "$(_program_path_find)" 1>/dev/null 2>/dev/null
_program_name='yubikey'
. functions/common.sh
PATH=/usr/local/bin:"$PATH"
. functions/brew.sh
. functions/yubikey.sh

depends stty
securely_read_value()
{
	local name_of_value="$1"
	
	local original_stty="$(stty -g)"
	stty -echo
	
		printf 'Please enter a %s: ' "$name_of_value" 1>&2
		local attempt1
		read -r attempt1

		printf 'Please confirm a %s: ' "$name_of_value" 1>&2
		local attempt2
		read -r attempt2
	
	stty "$original_stty"
	
	if [ "$attempt1" != "$attempt2" ]; then
		exit_error_message 'Values do not match'
	fi
	
	value="$attempt1"
}

depends dd hexdump
random_hexadecimal_value_from_dev_urandom()
{
	local byte_count="$1"
	
	dd if=/dev/urandom bs=1 count="$byte_count" 2>/dev/null | hexdump -v -e '"%x"'
}

depends rm hexdump
random_hexadecimal_value_from_smart_card()
{
	local byte_count="$1"
	
	local data_file_path="$temporary_folder_path"/random
	gnupg_scdaemon_secure_random_bytes "$byte_count"
	hexdump -v -e '"%x"' "$data_file_path"
	rm "$data_file_path"
}

depends tr head
random_alphanumeric_string_from_dev_urandom()
{
	local byte_count="$1"
	
	LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c "$byte_count"
}

depends tr head
random_ascii_string_from_dev_urandom()
{
	local byte_count="$1"
	
	LC_ALL=C tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c "$byte_count"
}

depends chmod mkdir cat
verb_yubikey_reset()
{
	case $# in
		
		1)
			local device_number="$1"
			local openpgp_surname="$2"
			local openpgp_given_name="$3"
			local openpgp_sex_code="$4"
			local openpgp_display_language="$5"
		;;
		
		*)
			exit_usage_message "Specify DEVICE_NUMBER SURNAME GIVEN_NAME SEX (eg M, F or X) LANGUAGE (eg en)"
		;;
		
	esac
	
	case "$openpgp_sex_code"
		
		M)
			local openpgp_sex=1
		;;
		
		F)
			local openpgp_sex=2
		;;
		
		X)
			local openpgp_sex=9
		;;
		
		*)
			exit_error_message "Unrecognised sex code $openpgp_sex_code"
		;;
		
	esac
	
	printf 'Enter existing_config_lock_code (press return for none): ' 1>&2
	local value
	securely_read_value
	local existing_config_lock_code="$value"
	
	# There is no restriction on the OATH password length; this is arbitrary.
	local oath_password_length=32

	# This is the default and can not be changed
	local fido2_pin_retries=8
	
	# These are the same as the defaults.
	local piv_pin_retries=3
	local piv_unlock_pin_retries=3
	
	# Default is 3.
	local openpgp_pin_retries=5
	
	# Default is 0.
	local openpgp_reset_code_retries=3
	
	# Default is 3.
	local openpgp_admin_pin_retries=3
	
	local configuration_folder_path
	set_configuration_folder_path

	local device_configuration_folder_path="$configuration_folder_path"/"$device_number"
	{
		chmod 0700 "$configuration_folder_path"
		mkdir -m 0500 -p "$device_configuration_folder_path"
		chmod 0500 "$configuration_folder_path"
	}

	local piv_exported_public_key_folder_path="$device_configuration_folder_path"/piv
	local openpgp_exported_public_key_folder_path="$device_configuration_folder_path"/openpgp
	{
		chmod 0700 "$device_configuration_folder_path"
		mkdir -m 0500 -p "$piv_exported_public_key_folder_path"
		mkdir -m 0500 -p "$openpgp_exported_public_key_folder_path"
		chmod 0500 "$device_configuration_folder_path"
	}
	
	local config_lock_code="$(random_alphanumeric_string_from_dev_urandom 16)"
	local fido2_pin="$(random_alphanumeric_string_from_dev_urandom 63)"
	local oath_password="$(random_alphanumeric_string_from_dev_urandom $oath_password_length)"
	local piv_pin="$(random_alphanumeric_string_from_dev_urandom 8)"
	local piv_pin_unlock_pin="$(random_alphanumeric_string_from_dev_urandom 8)"
	local piv_management_key="$(random_hexadecimal_value_from_dev_urandom 24)"
	local openpgp_pin="$(random_alphanumeric_string_from_dev_urandom 32)"
	local openpgp_admin_pin="$(random_alphanumeric_string_from_dev_urandom 32)"
	
	{
		local device_user_keys_file_path="$device_configuration_folder_path"/user-keys
		local device_administrator_keys_file_path="$device_configuration_folder_path"/administrator-keys
		chmod 0700 "$device_configuration_folder_path"
		cat >"$device_user_keys_file_path" <<-EOF
			fido2_pin=${fido2_pin}
			oath_password=${oath_password}
			piv_pin=${piv_pin}
			openpgp_pin=${openpgp_pin}
		EOF
		cat >"$device_administrator_keys_file_path" <<-EOF
			config_lock_code=${config_lock_code}
			piv_pin_unlock_pin=${piv_pin_unlock_pin}
			piv_management_key=${piv_management_key}
			openpgp_admin_pin=${openpgp_admin_pin}
		EOF
		chmod 0400 "$device_user_keys_file_path" "$device_administrator_keys_file_path"
		chmod 0500 "$device_configuration_folder_path"
	}

	yubikey_reset "$device_number" \
		"$existing_config_lock_code" "$config_lock_code" \
		"$fido2_pin" \
		"$oath_password" \
		"$piv_pin" "$piv_pin_unlock_pin" "$piv_pin_retries" "$piv_unlock_pin_retries" "$piv_management_key" "$piv_exported_public_key_folder_path" \
		"$openpgp_pin" "$openpgp_admin_pin" "$openpgp_pin_retries" "$openpgp_reset_code_retries" "$openpgp_admin_pin_retries" "$openpgp_exported_public_key_folder_path" "$openpgp_surname" "$openpgp_given_name" "$openpgp_sex" "$openpgp_display_language"
}

verb_yubikey_oath_add_uri()
{
	if [ $# -ne 2 ]; then
		exit_usage_message "yubikey oath-add-uri requires DEVICE_NUMBER and URI"
	fi
	
	local device_number="$1"
	local uri="$2"
	yubikey_oath_add_uri "$device_number" "$uri"
}

depends env
parse_verb_smimesign()
{
	exec env -i PATH="$PATH" "$(pwd)"/tools/smimesign "$@"
}

parse_verb_yubikey()
{
	case $# in
		
		0)
			exit_usage_message "No command specified for verb yubikey
$help_message"
		;;
		
		*)
			local command="$1"
			case "$command" in
				
				reset)
					verb_yubikey_reset
				;;
				
				oath-add-uri)
					verb_yubikey_oath_add_uri
				;;
				
				*)
			exit_usage_message "Command $command is unrecognised for verb yubikey
$help_message"
				;;
				
			esac
		;;
		
	esac
}

parse_arguments()
{
	local help_message="./$_program_name <verb>
Where verb is:-

help
yubikey

Verb specific:-

smimesign *
	arguments to pass to smimesign

yubikey
	reset DEVICE_NUMBER
	oath add-uri DEVICE_NUMBER URI
"
	
	case $# in
		
		0)
			exit_usage_message "No verb specified
$help_message"
		;;
		
		*)
			local verb="$1"
			shift 1
			case "$verb" in
				
				help|-h|-help|--help)
					exit_help_message "$help_message"
				;;
				
				smimesign)
					parse_verb_smimesign "$"
				;;
				
				yubikey)
					parse_verb_yubikey "$@"
				;;
				
				*)
					exit_usage_message "Unrecognised verb
$help_message"
				;;
				
			esac
		;;
		
	esac
	
	verb_${verb} "$@"
}

main()
{
	local temporary_folder_path="$(pwd)"/temporary
	make_temporary_folder
	
	parse_arguments "$@"
}

main "$@"
